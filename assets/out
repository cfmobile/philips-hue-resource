#!/bin/sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

# for jq
PATH=/usr/local/bin:$PATH


###########
#
# begin processing inputs
#
###########

payload=$TMPDIR/git-resource-request

cat > "$payload" <&0

host=$(jq -r '.source.host // ""' < "$payload")
user_id=$(jq -r '.source.user_id // ""' < "$payload")

  ###########
  #
  # required resource definition
  #
  ###########


if [ -z "$host" ]; then
  config_errors="${config_errors}invalid payload (missing host)
"
fi

if [ -z "$user_id" ]; then
  config_errors="${config_errors}invalid payload (missing user_id)
"
fi


  ###########
  #
  # optional config file
  #
  ###########

config_file_path=$(jq -r '.params.config_file_path // ""' < "$payload")

if [ -n "$config_file_path" ]; then
  light_id=$(jq -r '.config.light_id // ""' < "$config_file_path")
  hue=$(jq -r '.config.hue // ""' < "$config_file_path")
  sat=$(jq -r '.config.sat // ""' < "$config_file_path")
  bri=$(jq -r '.config.bri // ""' < "$config_file_path")
  on=$(jq -r '.config.on // ""' < "$config_file_path")
  alert=$(jq -r '.config.alert // ""' < "$config_file_path")
fi


  ###########
  #
  # optional put params
  #
  ###########

if [ -z "$light_id" ]; then
  light_id=$(jq -r '.params.light_id // ""' < "$payload")
fi

if [ -z "$hue" ]; then
  hue=$(jq -r '.params.hue // ""' < "$payload")
fi

if [ -z "$sat" ]; then
  sat=$(jq -r '.params.sat // ""' < "$payload")
fi

if [ -z "$bri" ]; then
  bri=$(jq -r '.params.bri // ""' < "$payload")
fi

if [ -z "$on" ]; then
  on=$(jq -r '.params.on // ""' < "$payload")
fi

if [ -z "$alert" ]; then
  alert=$(jq -r '.params.alert // ""' < "$payload")
fi


  ###########
  #
  # defaults from resource definition
  #
  ###########

if [ -z "$light_id" ]; then
  light_id=$(jq -r '.source.light_id // ""' < "$payload")
fi

if [ -z "$hue" ]; then
  hue=$(jq -r '.source.hue // ""' < "$payload")
fi

if [ -z "$sat" ]; then
  sat=$(jq -r '.source.sat // ""' < "$payload")
fi

if [ -z "$bri" ]; then
  bri=$(jq -r '.source.bri // ""' < "$payload")
fi

if [ -z "$on" ]; then
  on=$(jq -r '.source.on // ""' < "$payload")
fi

if [ -z "$alert" ]; then
  alert=$(jq -r '.source.alert // ""' < "$payload")
fi

  ###########
  #
  # fallback values
  #
  ###########

if [ -z "$sat" ]; then
  sat=254
fi

if [ -z "$bri" ]; then
  bri=254
fi

if [ -z "$on" ]; then
  on=true
fi

if [ -z "$alert" ]; then
  alert=none
fi

  ###########
  #
  # check for missing configurations
  #
  ###########

if [ -z "$light_id" ]; then
  config_errors="${config_errors}invalid payload (missing light_id)
"
fi

if [ -z "$hue" ]; then
  config_errors="${config_errors}invalid payload (missing hue)
"
fi

###########
#
# end processing inputs
#
###########

url="$host/api/$user_id/lights/$light_id/state"

if [ -n "$config_errors" ]; then
  echo "$config_errors"

  body=$(jq -n "{ on: true, bri: 254, sat: 254, effect: colorloop}")

  curl -X PUT -d "$body" "$url"

  exit 1
fi

body=$(jq -n "{ on: $on, sat: $sat, bri: $bri, hue: $hue, effect: none, alert: $alert}")

curl -X PUT -d "$body" "$url"

echo "null" >&3
